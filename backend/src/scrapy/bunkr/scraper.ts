import { chromium } from "@playwright/test";
import { saveItem } from "../../service/db/item.service";
import { procesarEnParalelo } from "./utils";

export async function scrapeBunkr(query: string) {
  console.log(`üìå Iniciando scraping para la query: ${query}`);
  const scraper = "bunkr";
  const browser = await chromium.launch();

  try {
    // 1. Paginaci√≥n en la b√∫squeda principal
    let currentSearchPage = 1;
    let searchHasNextPage = true;
    const allAlbumLinks: string[] = [];

    const searchPage = await browser.newPage();

    while (searchHasNextPage) {
      await searchPage.goto(
        `https://bunkr-albums.io/?search=${query}&page=${currentSearchPage}`,
        { waitUntil: "networkidle", timeout: 60000 },
      );

      // Extraer enlaces de √°lbumes
      const albumLinks = await searchPage.$$eval("main div div a", (elements) =>
        elements.map((el) => (el as HTMLAnchorElement).href),
      );

      // Si no hay √°lbumes en la p√°gina, detener la paginaci√≥n
      if (albumLinks.length === 0) {
        console.log(
          `üö´ No se encontraron √°lbumes en la p√°gina ${currentSearchPage}. Deteniendo paginaci√≥n.`,
        );
        searchHasNextPage = false;
        break;
      }

      allAlbumLinks.push(...albumLinks);
      console.log(
        `üîé P√°gina ${currentSearchPage}: ${albumLinks.length} √°lbumes encontrados`,
      );

      // Verificar si hay siguiente p√°gina
      const nextPageDisabled = await searchPage.$("a.ic-arrow-right.disabled");
      searchHasNextPage = !nextPageDisabled;
      currentSearchPage++;
    }

    await searchPage.close();
    console.log(`‚úÖ Total de √°lbumes encontrados: ${allAlbumLinks.length}`);

    // 2. Procesar cada √°lbum
    let allData: any[] = [];

    for (const albumLink of allAlbumLinks) {
      console.log(`\nüîó Procesando √°lbum: ${albumLink}`);
      const albumPage = await browser.newPage();

      try {
        // Obtener contenido principal del √°lbum
        await albumPage.goto(albumLink, {
          waitUntil: "networkidle",
          timeout: 60000,
        });

        // Procesar elementos del √°lbum
        const articleLinks = await albumPage.$$eval(
          "div.grid div div a",
          (elements) => elements.map((el) => (el as HTMLAnchorElement).href),
        );

        // Procesar en paralelo
        const articleResults = await procesarEnParalelo(
          articleLinks,
          browser,
          5,
        );

        // Guardar en base de datos
        await saveItem(query, scraper, albumLink, articleResults);
        allData.push(...articleResults);
      } catch (error) {
        console.log(
          `‚ö† Error procesando √°lbum ${albumLink}: ${(error as Error).message}`,
        );
      } finally {
        await albumPage.close();
      }
    }

    console.log("‚úÖ Scraping finalizado correctamente");
    return allData;
  } catch (error) {
    console.log(`‚ùå Error durante el scraping: ${(error as Error).message}`);
    throw error;
  } finally {
    await browser.close();
  }
}
